import fetch from "node-fetch";
import dotenv from "dotenv";

dotenv.config();

const HELIUS_API_KEY = process.env.HELIUS_API_KEY!;
const SEARCH_LIMIT = 200;

export const findTopSwappers = async (): Promise<string[]> => {
  const DUMMY = "3sGfYaHKkpbTt3pNPBwYdLMadKn5rJZtc97PB7meugja"; // –∞–∫—Ç–∏–≤–Ω–∏–π whale –∑ Jupiter
  const url = `https://api.helius.xyz/v0/addresses/${DUMMY}/transactions?api-key=${HELIUS_API_KEY}&pageSize=${SEARCH_LIMIT}`;

  const res = await fetch(url);
  const raw = await res.text();
  console.log("üìÑ –°–∏—Ä–∏–π response –≤—ñ–¥ Helius:\n", raw);

  let parsed: any;
  try {
    parsed = JSON.parse(raw);
  } catch (err) {
    console.error("‚ùå JSON parsing error:", err);
    return [];
  }

  const data = Array.isArray(parsed) ? parsed : parsed?.transactions || [];
  console.log("üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:", data.length);

  if (!Array.isArray(data)) {
    console.error("‚ùå data is not iterable (–Ω–µ –º–∞—Å–∏–≤):", data);
    return [];
  }

  const map: Record<string, number> = {};

  for (const tx of data) {
    const swap = tx?.events?.swap;
    if (swap?.owner) {
      map[swap.owner] = (map[swap.owner] || 0) + 1;
    }
  }

  const sorted = Object.entries(map).sort((a, b) => b[1] - a[1]);
  const top = sorted.slice(0, 10).map(([addr]) => addr);

  console.log("üîç –ó–Ω–∞–π–¥–µ–Ω—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–µ–π–¥–µ—Ä–∏:", top);
  return top;
};
